# technical_analysis.py (M칩dulo de An치lisis de Punto de Entrada)

import streamlit as st
import pandas as pd
import pandas_ta as ta
import plotly.graph_objects as go

def interpretar_indicadores(rsi, sma_50, sma_200, precio_actual):
    """Genera un veredicto y una recomendaci칩n basada en los indicadores t칠cnicos."""
    
    # 1. Determinar la Tendencia
    if sma_50 > sma_200:
        tendencia = "Alcista"
        emoji_tendencia = "游늳"
    else:
        tendencia = "Bajista"
        emoji_tendencia = "游늴"
        
    # 2. Determinar el Momento (RSI)
    if rsi > 70:
        momento = "Sobrecompra"
        emoji_momento = "游봇"
    elif rsi < 30:
        momento = "Sobreventa"
        emoji_momento = "游봈"
    else:
        momento = "Neutral"
        emoji_momento = "游땛"
        
    # 3. Generar Veredicto Final
    if tendencia == "Alcista":
        if momento == "Sobreventa":
            veredicto = "游릭 **Se침al de Compra Fuerte:** La acci칩n est치 en una tendencia alcista y parece estar en un punto bajo (sobrevendida), lo que podr칤a representar una excelente oportunidad de entrada."
        elif momento == "Neutral":
            veredicto = "游리 **Se침al de Acumulaci칩n/Mantener:** La acci칩n sigue su tendencia alcista principal sin se침ales de agotamiento. Es un buen momento para mantener o a침adir posiciones de forma gradual."
        else: # Sobrecompra
            veredicto = "丘멆잺 **Se침al de Precauci칩n:** Aunque la tendencia principal es fuerte, el activo est치 sobrecomprado. Existe un riesgo de correcci칩n a corto plazo. Se recomienda esperar un retroceso antes de entrar."
    else: # Tendencia Bajista
        veredicto = "游댮 **Se침al de Riesgo Elevado:** La acci칩n se encuentra en una tendencia bajista. A pesar de posibles rebotes, el riesgo de que contin칰e cayendo es alto. Generalmente se recomienda evitar la compra hasta que la tendencia se revierta."

    resumen = f"**Tendencia:** {emoji_tendencia} {tendencia} (SMA50 vs SMA200) | **Momento:** {emoji_momento} {momento} (RSI: {rsi:.2f})"
    
    return resumen, veredicto


def display_page(weights_df, prices_df, ticker_names):
    """
    Muestra la p치gina de an치lisis t칠cnico para las acciones del portafolio optimizado.
    """
    st.header("An치lisis T칠cnico de Punto de Entrada")
    st.info("Este m칩dulo analiza las acciones seleccionadas por el optimizador para evaluar si el **momento actual** es bueno para la compra.")

    # Analizar solo las acciones con un peso asignado en el portafolio
    acciones_a_analizar = weights_df[weights_df['Peso'] > 0].index

    for ticker in acciones_a_analizar:
        nombre_empresa = ticker_names.get(ticker, ticker)
        
        with st.expander(f"**An치lisis para {nombre_empresa} ({ticker})**"):
            
            # Crear un DataFrame espec칤fico para este ticker
            df = pd.DataFrame(prices_df[ticker])
            df.rename(columns={ticker: 'Close'}, inplace=True)

            # --- 1. C치lculo de Indicadores ---
            df.ta.rsi(length=14, append=True)
            df.ta.sma(length=50, append=True)
            df.ta.sma(length=200, append=True)
            df.dropna(inplace=True) # Eliminar filas sin datos de indicadores

            if df.empty:
                st.warning("No hay suficientes datos hist칩ricos para realizar el an치lisis t칠cnico.")
                continue

            # --- 2. Obtener los 칰ltimos valores ---
            ultimo_rsi = df['RSI_14'].iloc[-1]
            ultimo_sma50 = df['SMA_50'].iloc[-1]
            ultimo_sma200 = df['SMA_200'].iloc[-1]
            ultimo_precio = df['Close'].iloc[-1]
            
            # --- 3. Generar Veredicto de la IA ---
            resumen, veredicto = interpretar_indicadores(ultimo_rsi, ultimo_sma50, ultimo_sma200, ultimo_precio)
            
            st.markdown(f"##### {resumen}")
            st.markdown(veredicto)
            
            # --- 4. Crear Gr치fico ---
            st.write("**Gr치fico de Precios y Tendencia:**")
            
            fig = go.Figure()
            # A침adir l칤nea de precio
            fig.add_trace(go.Scatter(x=df.index, y=df['Close'], mode='lines', name='Precio de Cierre', line=dict(color='skyblue', width=2)))
            # A침adir Medias M칩viles
            fig.add_trace(go.Scatter(x=df.index, y=df['SMA_50'], mode='lines', name='SMA 50 D칤as', line=dict(color='orange', width=1.5)))
            fig.add_trace(go.Scatter(x=df.index, y=df['SMA_200'], mode='lines', name='SMA 200 D칤as', line=dict(color='red', width=1.5)))

            fig.update_layout(
                title=f'An치lisis de Tendencia para {nombre_empresa}',
                yaxis_title='Precio',
                xaxis_title='Fecha',
                legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
            )
            st.plotly_chart(fig, use_container_width=True)